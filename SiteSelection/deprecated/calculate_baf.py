#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# @Time    : 2022/02/10
# @Author  : zhangsiwen
# @contact : zhang.siwen@puruijizhun.com
# @LastModified: 2022/03/04
# @ChangeLog
#     20220210, first version
#     20220304, add --source


import argparse
import pysam


def GetArgs():
    parser = argparse.ArgumentParser(description='Calculate BAF of vcf generated by Platypus', formatter_class=argparse.RawTextHelpFormatter)
    parser._action_groups.pop()
    required = parser.add_argument_group('Required arguments')
    required.add_argument('--vcf', help='vcf file', action='store', dest='vcf', required=True)
    required.add_argument('--out', help='out file prefix', action='store', dest='out', required=True)
    optional = parser.add_argument_group('Optional arguments')
    optional.add_argument('--fmt', help='output format, vcf or tsv or both', default='both', choices=['vcf','tsv','both'], action='store', dest='fmt', required=False)
    optional.add_argument('--source', help='source of variant result, default [other]', default='other', choices=['platypus','other'], action='store', dest='source', required=False)
    args = parser.parse_args()
    return args


'''
vcffile = 'P13.normal.platypus.vcf'
outfile = 'test.vcf'
'''


def CalculateBAF(vcffile, outfile, fmt, source):
    vcf = open(vcffile)
    if fmt == 'vcf' or fmt == 'both':
        outvcf = open(outfile+'.vcf', 'w')
    if fmt == 'tsv' or fmt == 'both':
        outtsv = open(outfile+'.tsv', 'w')
        outtsv.write('\tchrs\tpos\tsample\n')
    for record in vcf:
        # write header
        if record.startswith('##'):
            if fmt == 'vcf' or fmt == 'both':
                outvcf.write(record)
            continue
        if record.startswith('#CHROM'):
            if fmt == 'vcf' or fmt == 'both':
                outvcf.write('##FORMAT=<ID=BAF,Number=.,Type=Float,Description="B-allele frequency, the proportion of reads at that position that contained the reference base versus the variant">\n')
                outvcf.write(record)
            continue
        # calculate
        CHROM, POS, ID, REF, ALT, QUAL, FILTER, INFO, FORMAT, sample = record.strip().split('\t')
        format_dict = dict(zip(FORMAT.split(':'), sample.split(':')))
        if source == 'platypus':
            DP = [int(i) for i in format_dict['NR'].split(',')]
            AD = sum([int(i) for i in format_dict['NV'].split(',')][1:])
            if len(DP) > 1:
                continue
            else:
                DP = DP[0]
        elif source == 'other':
            DP = int(format_dict['DP'])
            AD = sum([int(i) for i in format_dict['AD'].split(',')][1:])
        if DP == AD:
            baf = '1'
        else:
            baf = str(round(float(AD/DP),4))
        format_dict['BAF'] = baf
        FORMAT = ':'.join(format_dict.keys())
        sample = ':'.join(format_dict.values())
        # write out file
        if fmt == 'vcf' or fmt == 'both':
            outvcf.write('\t'.join([CHROM, POS, ID, REF, ALT, QUAL, FILTER, INFO, FORMAT, sample]) + '\n')
        if fmt == 'tsv' or fmt == 'both':
            mutation = ':'.join([CHROM,POS])
            outtsv.write('\t'.join([mutation, CHROM, POS, baf]) + '\n')
    vcf.close()
    if fmt == 'vcf' or fmt == 'both':
        outvcf.close()
    if fmt == 'tsv' or fmt == 'both':
        outtsv.close()


def main():
    args = GetArgs()
    CalculateBAF(args.vcf, args.out, args.fmt, args.source)


if __name__ == '__main__':
    main()